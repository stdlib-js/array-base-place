{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isComplexDataType = require( '@stdlib/array-base-assert-is-complex-floating-point-data-type' );\nvar isBooleanDataType = require( '@stdlib/array-base-assert-is-boolean-data-type' );\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar reinterpretComplex = require( '@stdlib/strided-base-reinterpret-complex' );\nvar reinterpretBoolean = require( '@stdlib/strided-base-reinterpret-boolean' );\nvar countTruthy = require( '@stdlib/array-base-count-truthy' );\n\n\n// FUNCTIONS //\n\n/**\n* Replaces elements in an indexed array with provided values.\n*\n* @private\n* @param {Collection} x - input array\n* @param {Collection} mask - mask array\n* @param {Collection} values - values to set\n* @returns {Collection} input array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var mask = [ 0, 1, 1, 0 ];\n* var values = [ 20, 30 ];\n*\n* var out = indexed( x, mask, values );\n* // returns [ 1, 20, 30, 4 ]\n*/\nfunction indexed( x, mask, values ) {\n\tvar iv;\n\tvar N;\n\tvar i;\n\n\tN = values.length;\n\tiv = 0;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( mask[ i ] ) {\n\t\t\tx[ i ] = values[ iv ];\n\t\t\tiv = ( iv+1 ) % N;\n\t\t}\n\t}\n\treturn x;\n}\n\n/**\n* Replaces elements of an accessor array with provided values.\n*\n* @private\n* @param {Object} x - input array object\n* @param {Object} mask - mask array object\n* @param {Object} values - values object\n* @returns {Collection} input array\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = toAccessorArray( [ 1, 2, 3, 4 ] );\n*\n* var mask = toAccessorArray( [ 0, 1, 1, 0 ] );\n* var values = toAccessorArray( [ 20, 30 ] );\n*\n* var out = accessors( arraylike2object( x ), arraylike2object( mask ), arraylike2object( values ) );\n*\n* var v = x.get( 0 );\n* // returns 1\n*\n* v = x.get( 1 );\n* // returns 20\n*/\nfunction accessors( x, mask, values ) {\n\tvar xdata;\n\tvar mdata;\n\tvar vdata;\n\tvar xset;\n\tvar mget;\n\tvar vget;\n\tvar iv;\n\tvar N;\n\tvar i;\n\n\txdata = x.data;\n\tmdata = mask.data;\n\tvdata = values.data;\n\n\txset = x.accessors[ 1 ];\n\tmget = mask.accessors[ 0 ];\n\tvget = values.accessors[ 0 ];\n\n\tN = vdata.length;\n\tiv = 0;\n\tfor ( i = 0; i < xdata.length; i++ ) {\n\t\tif ( mget( mdata, i ) ) {\n\t\t\txset( xdata, i, vget( vdata, iv ) );\n\t\t\tiv = ( iv+1 ) % N;\n\t\t}\n\t}\n\treturn xdata;\n}\n\n/**\n* Replaces elements in a complex array with provided values.\n*\n* @private\n* @param {Collection} x - real-valued floating-point input array view\n* @param {Object} mask - mask array object\n* @param {Collection} values - real-valued floating-point values array view\n* @returns {Collection} input array view\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* var mask = [ 1, 0, 1, 0 ];\n* var values = new Float64Array( [ 10.0, 20.0, 50.0, 60.0 ] );\n*\n* var out = complex( x, arraylike2object( mask ), values );\n* // returns <Float64Array>[ 10.0, 20.0, 3.0, 4.0, 50.0, 60.0, 7.0, 8.0 ]\n*/\nfunction complex( x, mask, values ) {\n\tvar mdata;\n\tvar mget;\n\tvar iv;\n\tvar N;\n\tvar i;\n\n\tmdata = mask.data;\n\tmget = mask.accessors[ 0 ];\n\n\tN = values.length;\n\tiv = 0;\n\tfor ( i = 0; i < x.length; i += 2 ) {\n\t\tif ( mget( mdata, i/2 ) ) {\n\t\t\tx[ i ] = values[ iv ];\n\t\t\tx[ i+1 ] = values[ iv+1 ];\n\t\t\tiv = ( iv+2 ) % N;\n\t\t}\n\t}\n\treturn x;\n}\n\n/**\n* Replaces elements in a boolean array with provided values.\n*\n* @private\n* @param {Uint8Array} x - input array\n* @param {Object} mask - mask array object\n* @param {Uint8Array} values - values to set\n* @returns {Uint8Array} input array\n*\n* @example\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n* var Uint8Array = require( '@stdlib/array-uint8' );\n*\n* var x = new Uint8Array( [ 0, 1, 1, 0 ] );\n*\n* var mask = [ 1, 0, 0, 1 ];\n* var values = new Uint8Array( [ 1, 1 ] );\n*\n* var out = boolean( x, arraylike2object( mask ), values );\n* // returns <Uint8Array>[ 1, 1, 1, 1 ]\n*/\nfunction boolean( x, mask, values ) {\n\tvar mdata;\n\tvar mget;\n\tvar iv;\n\tvar N;\n\tvar i;\n\n\tmdata = mask.data;\n\tmget = mask.accessors[ 0 ];\n\n\tN = values.length;\n\tiv = 0;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( mget( mdata, i ) ) {\n\t\t\tx[ i ] = values[ iv ];\n\t\t\tiv = ( i+1 ) % N;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// MAIN //\n\n/**\n* Replaces elements of an array with provided values according to a provided mask array.\n*\n* @param {Collection} x - input array\n* @param {Collection} mask - mask array\n* @param {Collection} values - values to set\n* @param {string} mode - string specifying behavior when the number of values does not equal the number of truthy mask values\n* @throws {Error} insufficient values to satisfy mask array\n* @throws {Error} number of values does not equal the number of truthy mask values\n* @returns {Collection} input array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var mask = [ 0, 1, 1, 0 ];\n* var values = [ 20, 30 ];\n*\n* var out = place( x, mask, values, 'strict' );\n* // returns [ 1, 20, 30, 4 ]\n*\n* var bool = ( out === x );\n* // returns true\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var mask = [ 0, 1, 1, 0 ];\n* var values = [ 30 ];\n*\n* var out = place( x, mask, values, 'strict_broadcast' );\n* // returns [ 1, 30, 30, 4 ]\n*\n* var bool = ( out === x );\n* // returns true\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var mask = [ 1, 1, 0, 1 ];\n* var values = [ 20, 30 ];\n*\n* var out = place( x, mask, values, 'repeat' );\n* // returns [ 20, 30, 3, 20 ]\n*\n* var bool = ( out === x );\n* // returns true\n*/\nfunction place( x, mask, values, mode ) {\n\tvar xo;\n\tvar mo;\n\tvar vo;\n\tvar M;\n\n\tM = values.length;\n\tif ( mode === 'strict' ) {\n\t\tif ( countTruthy( mask ) !== M ) {\n\t\t\tthrow new Error( 'invalid arguments. Number of values does not equal the number of truthy values in the mask array.' );\n\t\t}\n\t} else if ( mode === 'broadcast' ) {\n\t\tif ( M !== 1 && countTruthy( mask ) > M ) {\n\t\t\tthrow new Error( 'invalid arguments. Insufficient values to satisfy mask array.' );\n\t\t}\n\t} else if ( mode === 'strict_broadcast' ) {\n\t\tif ( M !== 1 && countTruthy( mask ) !== M ) {\n\t\t\tthrow new Error( 'invalid arguments. Number of values does not equal the number of truthy values in the mask array.' );\n\t\t}\n\t} else if ( mode === 'non_strict' ) {\n\t\tif ( countTruthy( mask ) > M ) {\n\t\t\tthrow new Error( 'invalid arguments. Insufficient values to satisfy mask array.' );\n\t\t}\n\t}\n\txo = arraylike2object( x );\n\tmo = arraylike2object( mask );\n\tvo = arraylike2object( values );\n\tif (\n\t\txo.accessorProtocol ||\n\t\tmo.accessorProtocol ||\n\t\tvo.accessorProtocol\n\t) {\n\t\t// Note: we only explicitly support select dtype pairs, as this function should not be concerned with casting rules, etc. That is left to userland...\n\t\tif ( isComplexDataType( xo.dtype ) && isComplexDataType( vo.dtype ) ) {\n\t\t\tcomplex( reinterpretComplex( x, 0 ), mo, reinterpretComplex( values, 0 ) ); // eslint-disable-line max-len\n\t\t\treturn x;\n\t\t}\n\t\tif ( isBooleanDataType( xo.dtype ) && isBooleanDataType( vo.dtype ) ) {\n\t\t\tboolean( reinterpretBoolean( x, 0 ), mo, reinterpretBoolean( values, 0 ) ); // eslint-disable-line max-len\n\t\t\treturn x;\n\t\t}\n\t\taccessors( xo, mo, vo );\n\t\treturn x;\n\t}\n\tindexed( x, mask, values );\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = place;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Replace elements of an array with provided values according to a provided mask array.\n*\n* @module @stdlib/array-base-place\n*\n* @example\n* var place = require( '@stdlib/array-base-place' );\n*\n* var x = [ 1, 2, 3, 4 ];\n*\n* var mask = [ 0, 1, 1, 0 ];\n* var values = [ 20, 30 ];\n*\n* var out = place( x, mask, values, 'strict' );\n* // returns [ 1, 20, 30, 4 ]\n*\n* var bool = ( out === x );\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isComplexDataType", "isBooleanDataType", "arraylike2object", "reinterpretComplex", "reinterpretBoolean", "countTruthy", "indexed", "x", "mask", "values", "iv", "N", "i", "accessors", "xdata", "mdata", "vdata", "xset", "mget", "vget", "complex", "boolean", "place", "mode", "xo", "mo", "vo", "M", "main"]
}
