{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isComplexDataType from '@stdlib/array-base-assert-is-complex-floating-point-data-type';\nimport isBooleanDataType from '@stdlib/array-base-assert-is-boolean-data-type';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport reinterpretComplex from '@stdlib/strided-base-reinterpret-complex';\nimport reinterpretBoolean from '@stdlib/strided-base-reinterpret-boolean';\nimport countTruthy from '@stdlib/array-base-count-truthy';\n\n\n// FUNCTIONS //\n\n/**\n* Replaces elements in an indexed array with provided values.\n*\n* @private\n* @param {Collection} x - input array\n* @param {Collection} mask - mask array\n* @param {Collection} values - values to set\n* @returns {Collection} input array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var mask = [ 0, 1, 1, 0 ];\n* var values = [ 20, 30 ];\n*\n* var out = indexed( x, mask, values );\n* // returns [ 1, 20, 30, 4 ]\n*/\nfunction indexed( x, mask, values ) {\n\tvar iv;\n\tvar N;\n\tvar i;\n\n\tN = values.length;\n\tiv = 0;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( mask[ i ] ) {\n\t\t\tx[ i ] = values[ iv ];\n\t\t\tiv = ( iv+1 ) % N;\n\t\t}\n\t}\n\treturn x;\n}\n\n/**\n* Replaces elements of an accessor array with provided values.\n*\n* @private\n* @param {Object} x - input array object\n* @param {Object} mask - mask array object\n* @param {Object} values - values object\n* @returns {Collection} input array\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 1, 2, 3, 4 ] );\n*\n* var mask = toAccessorArray( [ 0, 1, 1, 0 ] );\n* var values = toAccessorArray( [ 20, 30 ] );\n*\n* var out = accessors( arraylike2object( x ), arraylike2object( mask ), arraylike2object( values ) );\n*\n* var v = x.get( 0 );\n* // returns 1\n*\n* v = x.get( 1 );\n* // returns 20\n*/\nfunction accessors( x, mask, values ) {\n\tvar xdata;\n\tvar mdata;\n\tvar vdata;\n\tvar xset;\n\tvar mget;\n\tvar vget;\n\tvar iv;\n\tvar N;\n\tvar i;\n\n\txdata = x.data;\n\tmdata = mask.data;\n\tvdata = values.data;\n\n\txset = x.accessors[ 1 ];\n\tmget = mask.accessors[ 0 ];\n\tvget = values.accessors[ 0 ];\n\n\tN = vdata.length;\n\tiv = 0;\n\tfor ( i = 0; i < xdata.length; i++ ) {\n\t\tif ( mget( mdata, i ) ) {\n\t\t\txset( xdata, i, vget( vdata, iv ) );\n\t\t\tiv = ( iv+1 ) % N;\n\t\t}\n\t}\n\treturn xdata;\n}\n\n/**\n* Replaces elements in a complex array with provided values.\n*\n* @private\n* @param {Collection} x - real-valued floating-point input array view\n* @param {Object} mask - mask array object\n* @param {Collection} values - real-valued floating-point values array view\n* @returns {Collection} input array view\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* var mask = [ 1, 0, 1, 0 ];\n* var values = new Float64Array( [ 10.0, 20.0, 50.0, 60.0 ] );\n*\n* var out = complex( x, arraylike2object( mask ), values );\n* // returns <Float64Array>[ 10.0, 20.0, 3.0, 4.0, 50.0, 60.0, 7.0, 8.0 ]\n*/\nfunction complex( x, mask, values ) {\n\tvar mdata;\n\tvar mget;\n\tvar iv;\n\tvar N;\n\tvar i;\n\n\tmdata = mask.data;\n\tmget = mask.accessors[ 0 ];\n\n\tN = values.length;\n\tiv = 0;\n\tfor ( i = 0; i < x.length; i += 2 ) {\n\t\tif ( mget( mdata, i/2 ) ) {\n\t\t\tx[ i ] = values[ iv ];\n\t\t\tx[ i+1 ] = values[ iv+1 ];\n\t\t\tiv = ( iv+2 ) % N;\n\t\t}\n\t}\n\treturn x;\n}\n\n/**\n* Replaces elements in a boolean array with provided values.\n*\n* @private\n* @param {Uint8Array} x - input array\n* @param {Object} mask - mask array object\n* @param {Uint8Array} values - values to set\n* @returns {Uint8Array} input array\n*\n* @example\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n* import Uint8Array from '@stdlib/array-uint8';\n*\n* var x = new Uint8Array( [ 0, 1, 1, 0 ] );\n*\n* var mask = [ 1, 0, 0, 1 ];\n* var values = new Uint8Array( [ 1, 1 ] );\n*\n* var out = boolean( x, arraylike2object( mask ), values );\n* // returns <Uint8Array>[ 1, 1, 1, 1 ]\n*/\nfunction boolean( x, mask, values ) {\n\tvar mdata;\n\tvar mget;\n\tvar iv;\n\tvar N;\n\tvar i;\n\n\tmdata = mask.data;\n\tmget = mask.accessors[ 0 ];\n\n\tN = values.length;\n\tiv = 0;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( mget( mdata, i ) ) {\n\t\t\tx[ i ] = values[ iv ];\n\t\t\tiv = ( i+1 ) % N;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// MAIN //\n\n/**\n* Replaces elements of an array with provided values according to a provided mask array.\n*\n* @param {Collection} x - input array\n* @param {Collection} mask - mask array\n* @param {Collection} values - values to set\n* @param {string} mode - string specifying behavior when the number of values does not equal the number of truthy mask values\n* @throws {Error} insufficient values to satisfy mask array\n* @throws {Error} number of values does not equal the number of truthy mask values\n* @returns {Collection} input array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var mask = [ 0, 1, 1, 0 ];\n* var values = [ 20, 30 ];\n*\n* var out = place( x, mask, values, 'strict' );\n* // returns [ 1, 20, 30, 4 ]\n*\n* var bool = ( out === x );\n* // returns true\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var mask = [ 0, 1, 1, 0 ];\n* var values = [ 30 ];\n*\n* var out = place( x, mask, values, 'strict_broadcast' );\n* // returns [ 1, 30, 30, 4 ]\n*\n* var bool = ( out === x );\n* // returns true\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var mask = [ 1, 1, 0, 1 ];\n* var values = [ 20, 30 ];\n*\n* var out = place( x, mask, values, 'repeat' );\n* // returns [ 20, 30, 3, 20 ]\n*\n* var bool = ( out === x );\n* // returns true\n*/\nfunction place( x, mask, values, mode ) {\n\tvar xo;\n\tvar mo;\n\tvar vo;\n\tvar M;\n\n\tM = values.length;\n\tif ( mode === 'strict' ) {\n\t\tif ( countTruthy( mask ) !== M ) {\n\t\t\tthrow new Error( 'invalid arguments. Number of values does not equal the number of truthy values in the mask array.' );\n\t\t}\n\t} else if ( mode === 'broadcast' ) {\n\t\tif ( M !== 1 && countTruthy( mask ) > M ) {\n\t\t\tthrow new Error( 'invalid arguments. Insufficient values to satisfy mask array.' );\n\t\t}\n\t} else if ( mode === 'strict_broadcast' ) {\n\t\tif ( M !== 1 && countTruthy( mask ) !== M ) {\n\t\t\tthrow new Error( 'invalid arguments. Number of values does not equal the number of truthy values in the mask array.' );\n\t\t}\n\t} else if ( mode === 'non_strict' ) {\n\t\tif ( countTruthy( mask ) > M ) {\n\t\t\tthrow new Error( 'invalid arguments. Insufficient values to satisfy mask array.' );\n\t\t}\n\t}\n\txo = arraylike2object( x );\n\tmo = arraylike2object( mask );\n\tvo = arraylike2object( values );\n\tif (\n\t\txo.accessorProtocol ||\n\t\tmo.accessorProtocol ||\n\t\tvo.accessorProtocol\n\t) {\n\t\t// Note: we only explicitly support select dtype pairs, as this function should not be concerned with casting rules, etc. That is left to userland...\n\t\tif ( isComplexDataType( xo.dtype ) && isComplexDataType( vo.dtype ) ) {\n\t\t\tcomplex( reinterpretComplex( x, 0 ), mo, reinterpretComplex( values, 0 ) ); // eslint-disable-line max-len\n\t\t\treturn x;\n\t\t}\n\t\tif ( isBooleanDataType( xo.dtype ) && isBooleanDataType( vo.dtype ) ) {\n\t\t\tboolean( reinterpretBoolean( x, 0 ), mo, reinterpretBoolean( values, 0 ) ); // eslint-disable-line max-len\n\t\t\treturn x;\n\t\t}\n\t\taccessors( xo, mo, vo );\n\t\treturn x;\n\t}\n\tindexed( x, mask, values );\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default place;\n"],"names":["place","x","mask","values","mode","xo","mo","vo","M","length","countTruthy","Error","arraylike2object","accessorProtocol","isComplexDataType","dtype","mdata","mget","iv","N","i","data","accessors","complex","reinterpretComplex","isBooleanDataType","boolean","reinterpretBoolean","xdata","vdata","xset","vget","indexed"],"mappings":";;+oBAiQA,SAASA,EAAOC,EAAGC,EAAMC,EAAQC,GAChC,IAAIC,EACAC,EACAC,EACAC,EAGJ,GADAA,EAAIL,EAAOM,OACG,WAATL,GACJ,GAAKM,EAAaR,KAAWM,EAC5B,MAAM,IAAIG,MAAO,0GAEZ,GAAc,cAATP,GACX,GAAW,IAANI,GAAWE,EAAaR,GAASM,EACrC,MAAM,IAAIG,MAAO,sEAEZ,GAAc,qBAATP,GACX,GAAW,IAANI,GAAWE,EAAaR,KAAWM,EACvC,MAAM,IAAIG,MAAO,0GAEZ,GAAc,eAATP,GACNM,EAAaR,GAASM,EAC1B,MAAM,IAAIG,MAAO,iEAMnB,OAHAN,EAAKO,EAAkBX,GACvBK,EAAKM,EAAkBV,GACvBK,EAAKK,EAAkBT,GAEtBE,EAAGQ,kBACHP,EAAGO,kBACHN,EAAGM,iBAGEC,EAAmBT,EAAGU,QAAWD,EAAmBP,EAAGQ,QAnJ9D,SAAkBd,EAAGC,EAAMC,GAC1B,IAAIa,EACAC,EACAC,EACAC,EACAC,EAOJ,IALAJ,EAAQd,EAAKmB,KACbJ,EAAOf,EAAKoB,UAAW,GAEvBH,EAAIhB,EAAOM,OACXS,EAAK,EACCE,EAAI,EAAGA,EAAInB,EAAEQ,OAAQW,GAAK,EAC1BH,EAAMD,EAAOI,EAAE,KACnBnB,EAAGmB,GAAMjB,EAAQe,GACjBjB,EAAGmB,EAAE,GAAMjB,EAAQe,EAAG,GACtBA,GAAOA,EAAG,GAAMC,EAInB,CAgIGI,CAASC,EAAoBvB,EAAG,GAAKK,EAAIkB,EAAoBrB,EAAQ,IAC9DF,GAEHwB,EAAmBpB,EAAGU,QAAWU,EAAmBlB,EAAGQ,QA5G9D,SAAkBd,EAAGC,EAAMC,GAC1B,IAAIa,EACAC,EACAC,EACAC,EACAC,EAOJ,IALAJ,EAAQd,EAAKmB,KACbJ,EAAOf,EAAKoB,UAAW,GAEvBH,EAAIhB,EAAOM,OACXS,EAAK,EACCE,EAAI,EAAGA,EAAInB,EAAEQ,OAAQW,IACrBH,EAAMD,EAAOI,KACjBnB,EAAGmB,GAAMjB,EAAQe,GACjBA,GAAOE,EAAE,GAAMD,EAIlB,CA0FGO,CAASC,EAAoB1B,EAAG,GAAKK,EAAIqB,EAAoBxB,EAAQ,IAC9DF,IA5MV,SAAoBA,EAAGC,EAAMC,GAC5B,IAAIyB,EACAZ,EACAa,EACAC,EACAb,EACAc,EACAb,EACAC,EACAC,EAYJ,IAVAQ,EAAQ3B,EAAEoB,KACVL,EAAQd,EAAKmB,KACbQ,EAAQ1B,EAAOkB,KAEfS,EAAO7B,EAAEqB,UAAW,GACpBL,EAAOf,EAAKoB,UAAW,GACvBS,EAAO5B,EAAOmB,UAAW,GAEzBH,EAAIU,EAAMpB,OACVS,EAAK,EACCE,EAAI,EAAGA,EAAIQ,EAAMnB,OAAQW,IACzBH,EAAMD,EAAOI,KACjBU,EAAMF,EAAOR,EAAGW,EAAMF,EAAOX,IAC7BA,GAAOA,EAAG,GAAMC,EAInB,CAkLEG,CAAWjB,EAAIC,EAAIC,GACZN,IAzPT,SAAkBA,EAAGC,EAAMC,GAC1B,IAAIe,EACAC,EACAC,EAIJ,IAFAD,EAAIhB,EAAOM,OACXS,EAAK,EACCE,EAAI,EAAGA,EAAInB,EAAEQ,OAAQW,IACrBlB,EAAMkB,KACVnB,EAAGmB,GAAMjB,EAAQe,GACjBA,GAAOA,EAAG,GAAMC,EAInB,CA6OCa,CAAS/B,EAAGC,EAAMC,GACXF,EACR"}